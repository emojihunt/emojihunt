// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/emojihunt/emojihunt/state/status"
)

const checkPuzzleIsCreated = `-- name: CheckPuzzleIsCreated :one
SELECT COUNT(*) FROM puzzles
WHERE name = ? OR puzzle_url = ? COLLATE nocase
`

type CheckPuzzleIsCreatedParams struct {
	Name      string `json:"name"`
	PuzzleURL string `json:"puzzle_url"`
}

func (q *Queries) CheckPuzzleIsCreated(ctx context.Context, arg CheckPuzzleIsCreatedParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkPuzzleIsCreated, arg.Name, arg.PuzzleURL)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const checkPuzzleIsDiscovered = `-- name: CheckPuzzleIsDiscovered :one
SELECT COUNT(*) FROM discovered_puzzles
WHERE name = ? OR puzzle_url = ? COLLATE nocase
`

type CheckPuzzleIsDiscoveredParams struct {
	Name      string `json:"name"`
	PuzzleURL string `json:"puzzle_url"`
}

func (q *Queries) CheckPuzzleIsDiscovered(ctx context.Context, arg CheckPuzzleIsDiscoveredParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkPuzzleIsDiscovered, arg.Name, arg.PuzzleURL)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const clearPuzzleVoiceRoom = `-- name: ClearPuzzleVoiceRoom :exec
UPDATE puzzles
SET voice_room = ""
WHERE voice_room = ?
`

func (q *Queries) ClearPuzzleVoiceRoom(ctx context.Context, voiceRoom string) error {
	_, err := q.db.ExecContext(ctx, clearPuzzleVoiceRoom, voiceRoom)
	return err
}

const completeDiscoveredPuzzle = `-- name: CompleteDiscoveredPuzzle :exec
UPDATE discovered_puzzles SET discovered_round = NULL WHERE id = ?
`

func (q *Queries) CompleteDiscoveredPuzzle(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, completeDiscoveredPuzzle, id)
	return err
}

const completeDiscoveredRound = `-- name: CompleteDiscoveredRound :exec
UPDATE discovered_rounds SET created_as = ?2 WHERE id = ?1
`

type CompleteDiscoveredRoundParams struct {
	ID        int64 `json:"id"`
	CreatedAs int64 `json:"created_as"`
}

func (q *Queries) CompleteDiscoveredRound(ctx context.Context, arg CompleteDiscoveredRoundParams) error {
	_, err := q.db.ExecContext(ctx, completeDiscoveredRound, arg.ID, arg.CreatedAs)
	return err
}

const createDiscoveredPuzzle = `-- name: CreateDiscoveredPuzzle :exec
INSERT INTO discovered_puzzles (puzzle_url, name, discovered_round)
VALUES (?, ?, ?)
`

type CreateDiscoveredPuzzleParams struct {
	PuzzleURL       string        `json:"puzzle_url"`
	Name            string        `json:"name"`
	DiscoveredRound sql.NullInt64 `json:"discovered_round"`
}

func (q *Queries) CreateDiscoveredPuzzle(ctx context.Context, arg CreateDiscoveredPuzzleParams) error {
	_, err := q.db.ExecContext(ctx, createDiscoveredPuzzle, arg.PuzzleURL, arg.Name, arg.DiscoveredRound)
	return err
}

const createDiscoveredRound = `-- name: CreateDiscoveredRound :one
INSERT INTO discovered_rounds (name, message_id, notified_at, created_as)
VALUES (?, ?, ?, ?) RETURNING id
`

type CreateDiscoveredRoundParams struct {
	Name       string    `json:"name"`
	MessageID  string    `json:"message_id"`
	NotifiedAt time.Time `json:"notified_at"`
	CreatedAs  int64     `json:"created_as"`
}

func (q *Queries) CreateDiscoveredRound(ctx context.Context, arg CreateDiscoveredRoundParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createDiscoveredRound,
		arg.Name,
		arg.MessageID,
		arg.NotifiedAt,
		arg.CreatedAs,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createPuzzle = `-- name: CreatePuzzle :one
INSERT INTO puzzles (
    name, answer, round, status, note, location, puzzle_url,
    spreadsheet_id, discord_channel, meta, voice_room, reminder
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id
`

type CreatePuzzleParams struct {
	Name           string        `json:"name"`
	Answer         string        `json:"answer"`
	Round          int64         `json:"round"`
	Status         status.Status `json:"status"`
	Note           string        `json:"note"`
	Location       string        `json:"location"`
	PuzzleURL      string        `json:"puzzle_url"`
	SpreadsheetID  string        `json:"spreadsheet_id"`
	DiscordChannel string        `json:"discord_channel"`
	Meta           bool          `json:"meta"`
	VoiceRoom      string        `json:"voice_room"`
	Reminder       time.Time     `json:"reminder"`
}

func (q *Queries) CreatePuzzle(ctx context.Context, arg CreatePuzzleParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createPuzzle,
		arg.Name,
		arg.Answer,
		arg.Round,
		arg.Status,
		arg.Note,
		arg.Location,
		arg.PuzzleURL,
		arg.SpreadsheetID,
		arg.DiscordChannel,
		arg.Meta,
		arg.VoiceRoom,
		arg.Reminder,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createRound = `-- name: CreateRound :one
INSERT INTO rounds (
    name, emoji, hue, sort, special, drive_folder, discord_category
) VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING id, name, emoji, hue, sort, special, drive_folder, discord_category
`

type CreateRoundParams struct {
	Name            string `json:"name"`
	Emoji           string `json:"emoji"`
	Hue             int64  `json:"hue"`
	Sort            int64  `json:"sort"`
	Special         bool   `json:"special"`
	DriveFolder     string `json:"drive_folder"`
	DiscordCategory string `json:"discord_category"`
}

func (q *Queries) CreateRound(ctx context.Context, arg CreateRoundParams) (Round, error) {
	row := q.db.QueryRowContext(ctx, createRound,
		arg.Name,
		arg.Emoji,
		arg.Hue,
		arg.Sort,
		arg.Special,
		arg.DriveFolder,
		arg.DiscordCategory,
	)
	var i Round
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Emoji,
		&i.Hue,
		&i.Sort,
		&i.Special,
		&i.DriveFolder,
		&i.DiscordCategory,
	)
	return i, err
}

const deletePuzzle = `-- name: DeletePuzzle :exec
DELETE FROM puzzles
WHERE id = ?
`

func (q *Queries) DeletePuzzle(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePuzzle, id)
	return err
}

const deleteRound = `-- name: DeleteRound :exec
DELETE FROM rounds
WHERE id = ?
`

func (q *Queries) DeleteRound(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRound, id)
	return err
}

const getCreatedRound = `-- name: GetCreatedRound :one
SELECT id, name, emoji, hue, sort, special, drive_folder, discord_category FROM rounds
WHERE name = ? COLLATE nocase
`

func (q *Queries) GetCreatedRound(ctx context.Context, name string) (Round, error) {
	row := q.db.QueryRowContext(ctx, getCreatedRound, name)
	var i Round
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Emoji,
		&i.Hue,
		&i.Sort,
		&i.Special,
		&i.DriveFolder,
		&i.DiscordCategory,
	)
	return i, err
}

const getDiscoveredRound = `-- name: GetDiscoveredRound :one
SELECT id, name, message_id, notified_at, created_as FROM discovered_rounds
WHERE name = ? COLLATE nocase
`

func (q *Queries) GetDiscoveredRound(ctx context.Context, name string) (DiscoveredRound, error) {
	row := q.db.QueryRowContext(ctx, getDiscoveredRound, name)
	var i DiscoveredRound
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MessageID,
		&i.NotifiedAt,
		&i.CreatedAs,
	)
	return i, err
}

const getPuzzle = `-- name: GetPuzzle :one
SELECT
    p.id, p.name, p.answer, rounds.id, rounds.name, rounds.emoji, rounds.hue, rounds.sort, rounds.special, rounds.drive_folder, rounds.discord_category, p.status, p.note,
    p.location, p.puzzle_url, p.spreadsheet_id, p.discord_channel,
    p.meta, p.voice_room, p.reminder
FROM puzzles AS p
INNER JOIN rounds ON p.round = rounds.id
WHERE p.id = ?
`

type GetPuzzleRow struct {
	ID             int64         `json:"id"`
	Name           string        `json:"name"`
	Answer         string        `json:"answer"`
	Round          Round         `json:"round"`
	Status         status.Status `json:"status"`
	Note           string        `json:"note"`
	Location       string        `json:"location"`
	PuzzleURL      string        `json:"puzzle_url"`
	SpreadsheetID  string        `json:"spreadsheet_id"`
	DiscordChannel string        `json:"discord_channel"`
	Meta           bool          `json:"meta"`
	VoiceRoom      string        `json:"voice_room"`
	Reminder       time.Time     `json:"reminder"`
}

func (q *Queries) GetPuzzle(ctx context.Context, id int64) (GetPuzzleRow, error) {
	row := q.db.QueryRowContext(ctx, getPuzzle, id)
	var i GetPuzzleRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Answer,
		&i.Round.ID,
		&i.Round.Name,
		&i.Round.Emoji,
		&i.Round.Hue,
		&i.Round.Sort,
		&i.Round.Special,
		&i.Round.DriveFolder,
		&i.Round.DiscordCategory,
		&i.Status,
		&i.Note,
		&i.Location,
		&i.PuzzleURL,
		&i.SpreadsheetID,
		&i.DiscordChannel,
		&i.Meta,
		&i.VoiceRoom,
		&i.Reminder,
	)
	return i, err
}

const getPuzzleByChannel = `-- name: GetPuzzleByChannel :one
SELECT
    p.id, p.name, p.answer, rounds.id, rounds.name, rounds.emoji, rounds.hue, rounds.sort, rounds.special, rounds.drive_folder, rounds.discord_category, p.status, p.note,
    p.location, p.puzzle_url, p.spreadsheet_id, p.discord_channel,
    p.meta, p.voice_room, p.reminder
FROM puzzles AS p
INNER JOIN rounds ON p.round = rounds.id
WHERE p.discord_channel = ?
`

type GetPuzzleByChannelRow struct {
	ID             int64         `json:"id"`
	Name           string        `json:"name"`
	Answer         string        `json:"answer"`
	Round          Round         `json:"round"`
	Status         status.Status `json:"status"`
	Note           string        `json:"note"`
	Location       string        `json:"location"`
	PuzzleURL      string        `json:"puzzle_url"`
	SpreadsheetID  string        `json:"spreadsheet_id"`
	DiscordChannel string        `json:"discord_channel"`
	Meta           bool          `json:"meta"`
	VoiceRoom      string        `json:"voice_room"`
	Reminder       time.Time     `json:"reminder"`
}

func (q *Queries) GetPuzzleByChannel(ctx context.Context, discordChannel string) (GetPuzzleByChannelRow, error) {
	row := q.db.QueryRowContext(ctx, getPuzzleByChannel, discordChannel)
	var i GetPuzzleByChannelRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Answer,
		&i.Round.ID,
		&i.Round.Name,
		&i.Round.Emoji,
		&i.Round.Hue,
		&i.Round.Sort,
		&i.Round.Special,
		&i.Round.DriveFolder,
		&i.Round.DiscordCategory,
		&i.Status,
		&i.Note,
		&i.Location,
		&i.PuzzleURL,
		&i.SpreadsheetID,
		&i.DiscordChannel,
		&i.Meta,
		&i.VoiceRoom,
		&i.Reminder,
	)
	return i, err
}

const getPuzzlesByVoiceRoom = `-- name: GetPuzzlesByVoiceRoom :many
SELECT
    p.id, p.name, p.answer, rounds.id, rounds.name, rounds.emoji, rounds.hue, rounds.sort, rounds.special, rounds.drive_folder, rounds.discord_category, p.status, p.note,
    p.location, p.puzzle_url, p.spreadsheet_id, p.discord_channel,
    p.meta, p.voice_room, p.reminder
FROM puzzles AS p
INNER JOIN rounds ON p.round = rounds.id
WHERE p.voice_room = ?
`

type GetPuzzlesByVoiceRoomRow struct {
	ID             int64         `json:"id"`
	Name           string        `json:"name"`
	Answer         string        `json:"answer"`
	Round          Round         `json:"round"`
	Status         status.Status `json:"status"`
	Note           string        `json:"note"`
	Location       string        `json:"location"`
	PuzzleURL      string        `json:"puzzle_url"`
	SpreadsheetID  string        `json:"spreadsheet_id"`
	DiscordChannel string        `json:"discord_channel"`
	Meta           bool          `json:"meta"`
	VoiceRoom      string        `json:"voice_room"`
	Reminder       time.Time     `json:"reminder"`
}

func (q *Queries) GetPuzzlesByVoiceRoom(ctx context.Context, voiceRoom string) ([]GetPuzzlesByVoiceRoomRow, error) {
	rows, err := q.db.QueryContext(ctx, getPuzzlesByVoiceRoom, voiceRoom)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPuzzlesByVoiceRoomRow
	for rows.Next() {
		var i GetPuzzlesByVoiceRoomRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Answer,
			&i.Round.ID,
			&i.Round.Name,
			&i.Round.Emoji,
			&i.Round.Hue,
			&i.Round.Sort,
			&i.Round.Special,
			&i.Round.DriveFolder,
			&i.Round.DiscordCategory,
			&i.Status,
			&i.Note,
			&i.Location,
			&i.PuzzleURL,
			&i.SpreadsheetID,
			&i.DiscordChannel,
			&i.Meta,
			&i.VoiceRoom,
			&i.Reminder,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRound = `-- name: GetRound :one
SELECT id, name, emoji, hue, sort, special, drive_folder, discord_category FROM rounds
WHERE id = ? LIMIT 1
`

func (q *Queries) GetRound(ctx context.Context, id int64) (Round, error) {
	row := q.db.QueryRowContext(ctx, getRound, id)
	var i Round
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Emoji,
		&i.Hue,
		&i.Sort,
		&i.Special,
		&i.DriveFolder,
		&i.DiscordCategory,
	)
	return i, err
}

const getSetting = `-- name: GetSetting :one
SELECT value from settings
WHERE key = ?
`

func (q *Queries) GetSetting(ctx context.Context, key string) ([]byte, error) {
	row := q.db.QueryRowContext(ctx, getSetting, key)
	var value []byte
	err := row.Scan(&value)
	return value, err
}

const listCreatablePuzzles = `-- name: ListCreatablePuzzles :many
SELECT discovered_puzzles.id, puzzle_url, discovered_puzzles.name, discovered_round, discovered_rounds.id, discovered_rounds.name, message_id, notified_at, created_as
FROM discovered_puzzles
INNER JOIN discovered_rounds
ON discovered_puzzles.discovered_round = discovered_rounds.id
WHERE discovered_rounds.created_as != 0
`

type ListCreatablePuzzlesRow struct {
	ID              int64         `json:"id"`
	PuzzleURL       string        `json:"puzzle_url"`
	Name            string        `json:"name"`
	DiscoveredRound sql.NullInt64 `json:"discovered_round"`
	ID_2            int64         `json:"id_2"`
	Name_2          string        `json:"name_2"`
	MessageID       string        `json:"message_id"`
	NotifiedAt      time.Time     `json:"notified_at"`
	CreatedAs       int64         `json:"created_as"`
}

func (q *Queries) ListCreatablePuzzles(ctx context.Context) ([]ListCreatablePuzzlesRow, error) {
	rows, err := q.db.QueryContext(ctx, listCreatablePuzzles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCreatablePuzzlesRow
	for rows.Next() {
		var i ListCreatablePuzzlesRow
		if err := rows.Scan(
			&i.ID,
			&i.PuzzleURL,
			&i.Name,
			&i.DiscoveredRound,
			&i.ID_2,
			&i.Name_2,
			&i.MessageID,
			&i.NotifiedAt,
			&i.CreatedAs,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDiscoveredPuzzlesForRound = `-- name: ListDiscoveredPuzzlesForRound :many
SELECT id, puzzle_url, name, discovered_round FROM discovered_puzzles WHERE discovered_round = ?
`

func (q *Queries) ListDiscoveredPuzzlesForRound(ctx context.Context, discoveredRound sql.NullInt64) ([]DiscoveredPuzzle, error) {
	rows, err := q.db.QueryContext(ctx, listDiscoveredPuzzlesForRound, discoveredRound)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DiscoveredPuzzle
	for rows.Next() {
		var i DiscoveredPuzzle
		if err := rows.Scan(
			&i.ID,
			&i.PuzzleURL,
			&i.Name,
			&i.DiscoveredRound,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPendingDiscoveredRounds = `-- name: ListPendingDiscoveredRounds :many
SELECT id, name, message_id, notified_at, created_as FROM discovered_rounds WHERE created_as = 0
`

func (q *Queries) ListPendingDiscoveredRounds(ctx context.Context) ([]DiscoveredRound, error) {
	rows, err := q.db.QueryContext(ctx, listPendingDiscoveredRounds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DiscoveredRound
	for rows.Next() {
		var i DiscoveredRound
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.MessageID,
			&i.NotifiedAt,
			&i.CreatedAs,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPuzzles = `-- name: ListPuzzles :many
SELECT
    p.id, p.name, p.answer, rounds.id, rounds.name, rounds.emoji, rounds.hue, rounds.sort, rounds.special, rounds.drive_folder, rounds.discord_category, p.status, p.note,
    p.location, p.puzzle_url, p.spreadsheet_id, p.discord_channel,
    p.meta, p.voice_room, p.reminder
FROM puzzles AS p
INNER JOIN rounds ON p.round = rounds.id
ORDER BY rounds.special DESC, rounds.sort, rounds.id, p.meta, p.name
COLLATE nocase
`

type ListPuzzlesRow struct {
	ID             int64         `json:"id"`
	Name           string        `json:"name"`
	Answer         string        `json:"answer"`
	Round          Round         `json:"round"`
	Status         status.Status `json:"status"`
	Note           string        `json:"note"`
	Location       string        `json:"location"`
	PuzzleURL      string        `json:"puzzle_url"`
	SpreadsheetID  string        `json:"spreadsheet_id"`
	DiscordChannel string        `json:"discord_channel"`
	Meta           bool          `json:"meta"`
	VoiceRoom      string        `json:"voice_room"`
	Reminder       time.Time     `json:"reminder"`
}

func (q *Queries) ListPuzzles(ctx context.Context) ([]ListPuzzlesRow, error) {
	rows, err := q.db.QueryContext(ctx, listPuzzles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPuzzlesRow
	for rows.Next() {
		var i ListPuzzlesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Answer,
			&i.Round.ID,
			&i.Round.Name,
			&i.Round.Emoji,
			&i.Round.Hue,
			&i.Round.Sort,
			&i.Round.Special,
			&i.Round.DriveFolder,
			&i.Round.DiscordCategory,
			&i.Status,
			&i.Note,
			&i.Location,
			&i.PuzzleURL,
			&i.SpreadsheetID,
			&i.DiscordChannel,
			&i.Meta,
			&i.VoiceRoom,
			&i.Reminder,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPuzzlesByRound = `-- name: ListPuzzlesByRound :many
SELECT
    p.id, p.name, p.answer, rounds.id, rounds.name, rounds.emoji, rounds.hue, rounds.sort, rounds.special, rounds.drive_folder, rounds.discord_category, p.status, p.note,
    p.location, p.puzzle_url, p.spreadsheet_id, p.discord_channel,
    p.meta, p.voice_room, p.reminder
FROM puzzles AS p
INNER JOIN rounds ON p.round = rounds.id
WHERE p.round = ?
ORDER BY rounds.special DESC, rounds.sort, rounds.id, p.meta, p.name
COLLATE nocase
`

type ListPuzzlesByRoundRow struct {
	ID             int64         `json:"id"`
	Name           string        `json:"name"`
	Answer         string        `json:"answer"`
	Round          Round         `json:"round"`
	Status         status.Status `json:"status"`
	Note           string        `json:"note"`
	Location       string        `json:"location"`
	PuzzleURL      string        `json:"puzzle_url"`
	SpreadsheetID  string        `json:"spreadsheet_id"`
	DiscordChannel string        `json:"discord_channel"`
	Meta           bool          `json:"meta"`
	VoiceRoom      string        `json:"voice_room"`
	Reminder       time.Time     `json:"reminder"`
}

func (q *Queries) ListPuzzlesByRound(ctx context.Context, round int64) ([]ListPuzzlesByRoundRow, error) {
	rows, err := q.db.QueryContext(ctx, listPuzzlesByRound, round)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPuzzlesByRoundRow
	for rows.Next() {
		var i ListPuzzlesByRoundRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Answer,
			&i.Round.ID,
			&i.Round.Name,
			&i.Round.Emoji,
			&i.Round.Hue,
			&i.Round.Sort,
			&i.Round.Special,
			&i.Round.DriveFolder,
			&i.Round.DiscordCategory,
			&i.Status,
			&i.Note,
			&i.Location,
			&i.PuzzleURL,
			&i.SpreadsheetID,
			&i.DiscordChannel,
			&i.Meta,
			&i.VoiceRoom,
			&i.Reminder,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPuzzlesByVoiceRoom = `-- name: ListPuzzlesByVoiceRoom :many
SELECT p.id, p.name, p.voice_room
FROM puzzles as p
INNER JOIN rounds ON p.round = rounds.id
WHERE p.voice_room != ""
ORDER BY p.voice_room, rounds.special DESC, rounds.sort, rounds.id, p.meta, p.name
COLLATE nocase
`

type ListPuzzlesByVoiceRoomRow struct {
	ID        int64  `json:"id"`
	Name      string `json:"name"`
	VoiceRoom string `json:"voice_room"`
}

func (q *Queries) ListPuzzlesByVoiceRoom(ctx context.Context) ([]ListPuzzlesByVoiceRoomRow, error) {
	rows, err := q.db.QueryContext(ctx, listPuzzlesByVoiceRoom)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPuzzlesByVoiceRoomRow
	for rows.Next() {
		var i ListPuzzlesByVoiceRoomRow
		if err := rows.Scan(&i.ID, &i.Name, &i.VoiceRoom); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRounds = `-- name: ListRounds :many
SELECT id, name, emoji, hue, sort, special, drive_folder, discord_category FROM rounds
ORDER BY special DESC, sort, id
COLLATE nocase
`

func (q *Queries) ListRounds(ctx context.Context) ([]Round, error) {
	rows, err := q.db.QueryContext(ctx, listRounds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Round
	for rows.Next() {
		var i Round
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Emoji,
			&i.Hue,
			&i.Sort,
			&i.Special,
			&i.DriveFolder,
			&i.DiscordCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDiscoveredRound = `-- name: UpdateDiscoveredRound :exec
UPDATE discovered_rounds
SET name = ?2, message_id = ?3, notified_at = ?4, created_as = ?5
WHERE id = ?1
`

type UpdateDiscoveredRoundParams struct {
	ID         int64     `json:"id"`
	Name       string    `json:"name"`
	MessageID  string    `json:"message_id"`
	NotifiedAt time.Time `json:"notified_at"`
	CreatedAs  int64     `json:"created_as"`
}

func (q *Queries) UpdateDiscoveredRound(ctx context.Context, arg UpdateDiscoveredRoundParams) error {
	_, err := q.db.ExecContext(ctx, updateDiscoveredRound,
		arg.ID,
		arg.Name,
		arg.MessageID,
		arg.NotifiedAt,
		arg.CreatedAs,
	)
	return err
}

const updatePuzzle = `-- name: UpdatePuzzle :exec
UPDATE puzzles
SET name = ?2, answer = ?3, round = ?4, status = ?5, note = ?6,
location = ?7, puzzle_url = ?8, spreadsheet_id = ?9, discord_channel = ?10,
meta = ?11, voice_room = ?12, reminder = ?13
WHERE id = ?1
`

type UpdatePuzzleParams struct {
	ID             int64         `json:"id"`
	Name           string        `json:"name"`
	Answer         string        `json:"answer"`
	Round          int64         `json:"round"`
	Status         status.Status `json:"status"`
	Note           string        `json:"note"`
	Location       string        `json:"location"`
	PuzzleURL      string        `json:"puzzle_url"`
	SpreadsheetID  string        `json:"spreadsheet_id"`
	DiscordChannel string        `json:"discord_channel"`
	Meta           bool          `json:"meta"`
	VoiceRoom      string        `json:"voice_room"`
	Reminder       time.Time     `json:"reminder"`
}

func (q *Queries) UpdatePuzzle(ctx context.Context, arg UpdatePuzzleParams) error {
	_, err := q.db.ExecContext(ctx, updatePuzzle,
		arg.ID,
		arg.Name,
		arg.Answer,
		arg.Round,
		arg.Status,
		arg.Note,
		arg.Location,
		arg.PuzzleURL,
		arg.SpreadsheetID,
		arg.DiscordChannel,
		arg.Meta,
		arg.VoiceRoom,
		arg.Reminder,
	)
	return err
}

const updateRound = `-- name: UpdateRound :exec
UPDATE rounds
SET name = ?2, emoji = ?3, hue = ?4, sort = ?5, special = ?6,
    drive_folder = ?7, discord_category = ?8
WHERE id = ?1
`

type UpdateRoundParams struct {
	ID              int64  `json:"id"`
	Name            string `json:"name"`
	Emoji           string `json:"emoji"`
	Hue             int64  `json:"hue"`
	Sort            int64  `json:"sort"`
	Special         bool   `json:"special"`
	DriveFolder     string `json:"drive_folder"`
	DiscordCategory string `json:"discord_category"`
}

func (q *Queries) UpdateRound(ctx context.Context, arg UpdateRoundParams) error {
	_, err := q.db.ExecContext(ctx, updateRound,
		arg.ID,
		arg.Name,
		arg.Emoji,
		arg.Hue,
		arg.Sort,
		arg.Special,
		arg.DriveFolder,
		arg.DiscordCategory,
	)
	return err
}

const updateSetting = `-- name: UpdateSetting :exec
INSERT OR REPLACE INTO settings (key, value)
VALUES (?, ?)
`

type UpdateSettingParams struct {
	Key   string `json:"key"`
	Value []byte `json:"value"`
}

func (q *Queries) UpdateSetting(ctx context.Context, arg UpdateSettingParams) error {
	_, err := q.db.ExecContext(ctx, updateSetting, arg.Key, arg.Value)
	return err
}
