// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: query.sql

package db

import (
	"context"
	"time"

	"github.com/emojihunt/emojihunt/db/field"
)

const createPuzzle = `-- name: CreatePuzzle :one
INSERT INTO puzzles (
    name, answer, round, status, note, location, puzzle_url,
    spreadsheet_id, discord_channel, meta, archived, voice_room,
    reminder
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id
`

type CreatePuzzleParams struct {
	Name           string       `json:"name"`
	Answer         string       `json:"answer"`
	Round          int64        `json:"round"`
	Status         field.Status `json:"status"`
	Note           string       `json:"note"`
	Location       string       `json:"location"`
	PuzzleURL      string       `json:"puzzle_url"`
	SpreadsheetID  string       `json:"spreadsheet_id"`
	DiscordChannel string       `json:"discord_channel"`
	Meta           bool         `json:"meta"`
	Archived       bool         `json:"archived"`
	VoiceRoom      string       `json:"voice_room"`
	Reminder       time.Time    `json:"reminder"`
}

func (q *Queries) CreatePuzzle(ctx context.Context, arg CreatePuzzleParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createPuzzle,
		arg.Name,
		arg.Answer,
		arg.Round,
		arg.Status,
		arg.Note,
		arg.Location,
		arg.PuzzleURL,
		arg.SpreadsheetID,
		arg.DiscordChannel,
		arg.Meta,
		arg.Archived,
		arg.VoiceRoom,
		arg.Reminder,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createRound = `-- name: CreateRound :one
INSERT INTO rounds (name, emoji, hue, special)
VALUES (?, ?, ?, ?)
RETURNING id, name, emoji, hue, special
`

type CreateRoundParams struct {
	Name    string `json:"name"`
	Emoji   string `json:"emoji"`
	Hue     int64  `json:"hue"`
	Special bool   `json:"special"`
}

func (q *Queries) CreateRound(ctx context.Context, arg CreateRoundParams) (Round, error) {
	row := q.db.QueryRowContext(ctx, createRound,
		arg.Name,
		arg.Emoji,
		arg.Hue,
		arg.Special,
	)
	var i Round
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Emoji,
		&i.Hue,
		&i.Special,
	)
	return i, err
}

const deletePuzzle = `-- name: DeletePuzzle :exec
DELETE FROM puzzles
WHERE id = ?
`

func (q *Queries) DeletePuzzle(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePuzzle, id)
	return err
}

const deleteRound = `-- name: DeleteRound :exec
DELETE FROM rounds
WHERE id = ?
`

func (q *Queries) DeleteRound(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRound, id)
	return err
}

const getPuzzle = `-- name: GetPuzzle :one
SELECT
    p.id, p.name, p.answer, rounds.id, rounds.name, rounds.emoji, rounds.hue, rounds.special, p.status, p.note,
    p.location, p.puzzle_url, p.spreadsheet_id, p.discord_channel,
    p.meta, p.archived, p.voice_room, p.reminder
FROM puzzles AS p
INNER JOIN rounds ON p.round = rounds.id
WHERE p.id = ?
`

type GetPuzzleRow struct {
	ID             int64        `json:"id"`
	Name           string       `json:"name"`
	Answer         string       `json:"answer"`
	Round          Round        `json:"round"`
	Status         field.Status `json:"status"`
	Note           string       `json:"note"`
	Location       string       `json:"location"`
	PuzzleURL      string       `json:"puzzle_url"`
	SpreadsheetID  string       `json:"spreadsheet_id"`
	DiscordChannel string       `json:"discord_channel"`
	Meta           bool         `json:"meta"`
	Archived       bool         `json:"archived"`
	VoiceRoom      string       `json:"voice_room"`
	Reminder       time.Time    `json:"reminder"`
}

func (q *Queries) GetPuzzle(ctx context.Context, id int64) (GetPuzzleRow, error) {
	row := q.db.QueryRowContext(ctx, getPuzzle, id)
	var i GetPuzzleRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Answer,
		&i.Round.ID,
		&i.Round.Name,
		&i.Round.Emoji,
		&i.Round.Hue,
		&i.Round.Special,
		&i.Status,
		&i.Note,
		&i.Location,
		&i.PuzzleURL,
		&i.SpreadsheetID,
		&i.DiscordChannel,
		&i.Meta,
		&i.Archived,
		&i.VoiceRoom,
		&i.Reminder,
	)
	return i, err
}

const getPuzzlesByDiscordChannel = `-- name: GetPuzzlesByDiscordChannel :many

SELECT
    p.id, p.name, p.answer, rounds.id, rounds.name, rounds.emoji, rounds.hue, rounds.special, p.status, p.note,
    p.location, p.puzzle_url, p.spreadsheet_id, p.discord_channel,
    p.meta, p.archived, p.voice_room, p.reminder
FROM puzzles AS p
INNER JOIN rounds ON p.round = rounds.id
WHERE p.discord_channel = ?
`

type GetPuzzlesByDiscordChannelRow struct {
	ID             int64        `json:"id"`
	Name           string       `json:"name"`
	Answer         string       `json:"answer"`
	Round          Round        `json:"round"`
	Status         field.Status `json:"status"`
	Note           string       `json:"note"`
	Location       string       `json:"location"`
	PuzzleURL      string       `json:"puzzle_url"`
	SpreadsheetID  string       `json:"spreadsheet_id"`
	DiscordChannel string       `json:"discord_channel"`
	Meta           bool         `json:"meta"`
	Archived       bool         `json:"archived"`
	VoiceRoom      string       `json:"voice_room"`
	Reminder       time.Time    `json:"reminder"`
}

func (q *Queries) GetPuzzlesByDiscordChannel(ctx context.Context, discordChannel string) ([]GetPuzzlesByDiscordChannelRow, error) {
	rows, err := q.db.QueryContext(ctx, getPuzzlesByDiscordChannel, discordChannel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPuzzlesByDiscordChannelRow
	for rows.Next() {
		var i GetPuzzlesByDiscordChannelRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Answer,
			&i.Round.ID,
			&i.Round.Name,
			&i.Round.Emoji,
			&i.Round.Hue,
			&i.Round.Special,
			&i.Status,
			&i.Note,
			&i.Location,
			&i.PuzzleURL,
			&i.SpreadsheetID,
			&i.DiscordChannel,
			&i.Meta,
			&i.Archived,
			&i.VoiceRoom,
			&i.Reminder,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRawPuzzle = `-- name: GetRawPuzzle :one
SELECT id, name, answer, round, status, note, location, puzzle_url, spreadsheet_id, discord_channel, meta, archived, voice_room, reminder FROM puzzles
WHERE id = ? LIMIT 1
`

func (q *Queries) GetRawPuzzle(ctx context.Context, id int64) (RawPuzzle, error) {
	row := q.db.QueryRowContext(ctx, getRawPuzzle, id)
	var i RawPuzzle
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Answer,
		&i.Round,
		&i.Status,
		&i.Note,
		&i.Location,
		&i.PuzzleURL,
		&i.SpreadsheetID,
		&i.DiscordChannel,
		&i.Meta,
		&i.Archived,
		&i.VoiceRoom,
		&i.Reminder,
	)
	return i, err
}

const getRound = `-- name: GetRound :one
SELECT id, name, emoji, hue, special FROM rounds
WHERE id = ? LIMIT 1
`

func (q *Queries) GetRound(ctx context.Context, id int64) (Round, error) {
	row := q.db.QueryRowContext(ctx, getRound, id)
	var i Round
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Emoji,
		&i.Hue,
		&i.Special,
	)
	return i, err
}

const getState = `-- name: GetState :many
SELECT id, data from state
ORDER BY id
`

func (q *Queries) GetState(ctx context.Context) ([]State, error) {
	rows, err := q.db.QueryContext(ctx, getState)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []State
	for rows.Next() {
		var i State
		if err := rows.Scan(&i.ID, &i.Data); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPuzzles = `-- name: ListPuzzles :many
SELECT
    p.id, p.name, p.answer, rounds.id, rounds.name, rounds.emoji, rounds.hue, rounds.special, p.status, p.note,
    p.location, p.puzzle_url, p.spreadsheet_id, p.discord_channel,
    p.meta, p.archived, p.voice_room, p.reminder
FROM puzzles AS p
INNER JOIN rounds ON p.round = rounds.id
ORDER BY p.id
`

type ListPuzzlesRow struct {
	ID             int64        `json:"id"`
	Name           string       `json:"name"`
	Answer         string       `json:"answer"`
	Round          Round        `json:"round"`
	Status         field.Status `json:"status"`
	Note           string       `json:"note"`
	Location       string       `json:"location"`
	PuzzleURL      string       `json:"puzzle_url"`
	SpreadsheetID  string       `json:"spreadsheet_id"`
	DiscordChannel string       `json:"discord_channel"`
	Meta           bool         `json:"meta"`
	Archived       bool         `json:"archived"`
	VoiceRoom      string       `json:"voice_room"`
	Reminder       time.Time    `json:"reminder"`
}

func (q *Queries) ListPuzzles(ctx context.Context) ([]ListPuzzlesRow, error) {
	rows, err := q.db.QueryContext(ctx, listPuzzles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPuzzlesRow
	for rows.Next() {
		var i ListPuzzlesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Answer,
			&i.Round.ID,
			&i.Round.Name,
			&i.Round.Emoji,
			&i.Round.Hue,
			&i.Round.Special,
			&i.Status,
			&i.Note,
			&i.Location,
			&i.PuzzleURL,
			&i.SpreadsheetID,
			&i.DiscordChannel,
			&i.Meta,
			&i.Archived,
			&i.VoiceRoom,
			&i.Reminder,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPuzzlesWithReminder = `-- name: ListPuzzlesWithReminder :many
SELECT id, name, discord_channel, reminder FROM puzzles
WHERE reminder > "2020-01-01"
ORDER BY reminder
`

type ListPuzzlesWithReminderRow struct {
	ID             int64     `json:"id"`
	Name           string    `json:"name"`
	DiscordChannel string    `json:"discord_channel"`
	Reminder       time.Time `json:"reminder"`
}

func (q *Queries) ListPuzzlesWithReminder(ctx context.Context) ([]ListPuzzlesWithReminderRow, error) {
	rows, err := q.db.QueryContext(ctx, listPuzzlesWithReminder)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPuzzlesWithReminderRow
	for rows.Next() {
		var i ListPuzzlesWithReminderRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.DiscordChannel,
			&i.Reminder,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPuzzlesWithVoiceRoom = `-- name: ListPuzzlesWithVoiceRoom :many
SELECT id, name, voice_room FROM puzzles
WHERE voice_room != ""
ORDER BY id
`

type ListPuzzlesWithVoiceRoomRow struct {
	ID        int64  `json:"id"`
	Name      string `json:"name"`
	VoiceRoom string `json:"voice_room"`
}

func (q *Queries) ListPuzzlesWithVoiceRoom(ctx context.Context) ([]ListPuzzlesWithVoiceRoomRow, error) {
	rows, err := q.db.QueryContext(ctx, listPuzzlesWithVoiceRoom)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPuzzlesWithVoiceRoomRow
	for rows.Next() {
		var i ListPuzzlesWithVoiceRoomRow
		if err := rows.Scan(&i.ID, &i.Name, &i.VoiceRoom); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRounds = `-- name: ListRounds :many
SELECT id, name, emoji, hue, special FROM rounds
ORDER BY id
`

func (q *Queries) ListRounds(ctx context.Context) ([]Round, error) {
	rows, err := q.db.QueryContext(ctx, listRounds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Round
	for rows.Next() {
		var i Round
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Emoji,
			&i.Hue,
			&i.Special,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArchived = `-- name: UpdateArchived :exec
UPDATE puzzles SET archived = ?2
WHERE id = ?1
`

type UpdateArchivedParams struct {
	ID       int64 `json:"id"`
	Archived bool  `json:"archived"`
}

func (q *Queries) UpdateArchived(ctx context.Context, arg UpdateArchivedParams) error {
	_, err := q.db.ExecContext(ctx, updateArchived, arg.ID, arg.Archived)
	return err
}

const updateDiscordChannel = `-- name: UpdateDiscordChannel :exec
UPDATE puzzles SET discord_channel = ?2
WHERE id = ?1
`

type UpdateDiscordChannelParams struct {
	ID             int64  `json:"id"`
	DiscordChannel string `json:"discord_channel"`
}

func (q *Queries) UpdateDiscordChannel(ctx context.Context, arg UpdateDiscordChannelParams) error {
	_, err := q.db.ExecContext(ctx, updateDiscordChannel, arg.ID, arg.DiscordChannel)
	return err
}

const updateLocation = `-- name: UpdateLocation :exec
UPDATE puzzles SET location = ?2
WHERE id = ?1
`

type UpdateLocationParams struct {
	ID       int64  `json:"id"`
	Location string `json:"location"`
}

func (q *Queries) UpdateLocation(ctx context.Context, arg UpdateLocationParams) error {
	_, err := q.db.ExecContext(ctx, updateLocation, arg.ID, arg.Location)
	return err
}

const updateNote = `-- name: UpdateNote :exec
UPDATE puzzles SET note = ?2
WHERE id = ?1
`

type UpdateNoteParams struct {
	ID   int64  `json:"id"`
	Note string `json:"note"`
}

func (q *Queries) UpdateNote(ctx context.Context, arg UpdateNoteParams) error {
	_, err := q.db.ExecContext(ctx, updateNote, arg.ID, arg.Note)
	return err
}

const updatePuzzle = `-- name: UpdatePuzzle :exec
UPDATE puzzles
SET name = ?2, answer = ?3, round = ?4, status = ?5, note = ?6,
location = ?7, puzzle_url = ?8, spreadsheet_id = ?9, discord_channel = ?10,
meta = ?11, archived = ?12, voice_room = ?13, reminder = ?14
WHERE id = ?1
`

type UpdatePuzzleParams struct {
	ID             int64        `json:"id"`
	Name           string       `json:"name"`
	Answer         string       `json:"answer"`
	Round          int64        `json:"round"`
	Status         field.Status `json:"status"`
	Note           string       `json:"note"`
	Location       string       `json:"location"`
	PuzzleURL      string       `json:"puzzle_url"`
	SpreadsheetID  string       `json:"spreadsheet_id"`
	DiscordChannel string       `json:"discord_channel"`
	Meta           bool         `json:"meta"`
	Archived       bool         `json:"archived"`
	VoiceRoom      string       `json:"voice_room"`
	Reminder       time.Time    `json:"reminder"`
}

func (q *Queries) UpdatePuzzle(ctx context.Context, arg UpdatePuzzleParams) error {
	_, err := q.db.ExecContext(ctx, updatePuzzle,
		arg.ID,
		arg.Name,
		arg.Answer,
		arg.Round,
		arg.Status,
		arg.Note,
		arg.Location,
		arg.PuzzleURL,
		arg.SpreadsheetID,
		arg.DiscordChannel,
		arg.Meta,
		arg.Archived,
		arg.VoiceRoom,
		arg.Reminder,
	)
	return err
}

const updateRound = `-- name: UpdateRound :exec
UPDATE rounds
SET name = ?2, emoji = ?3, hue = ?4, special = ?5
WHERE id = ?1
`

type UpdateRoundParams struct {
	ID      int64  `json:"id"`
	Name    string `json:"name"`
	Emoji   string `json:"emoji"`
	Hue     int64  `json:"hue"`
	Special bool   `json:"special"`
}

func (q *Queries) UpdateRound(ctx context.Context, arg UpdateRoundParams) error {
	_, err := q.db.ExecContext(ctx, updateRound,
		arg.ID,
		arg.Name,
		arg.Emoji,
		arg.Hue,
		arg.Special,
	)
	return err
}

const updateSpreadsheetID = `-- name: UpdateSpreadsheetID :exec
UPDATE puzzles SET spreadsheet_id = ?2
WHERE id = ?1
`

type UpdateSpreadsheetIDParams struct {
	ID            int64  `json:"id"`
	SpreadsheetID string `json:"spreadsheet_id"`
}

func (q *Queries) UpdateSpreadsheetID(ctx context.Context, arg UpdateSpreadsheetIDParams) error {
	_, err := q.db.ExecContext(ctx, updateSpreadsheetID, arg.ID, arg.SpreadsheetID)
	return err
}

const updateState = `-- name: UpdateState :exec
INSERT OR REPLACE INTO state (id, data)
VALUES (1, ?)
`

func (q *Queries) UpdateState(ctx context.Context, data []byte) error {
	_, err := q.db.ExecContext(ctx, updateState, data)
	return err
}

const updateStatusAndAnswer = `-- name: UpdateStatusAndAnswer :exec
UPDATE puzzles SET status = ?2, answer = ?3, archived = ?4
WHERE id = ?1
`

type UpdateStatusAndAnswerParams struct {
	ID       int64        `json:"id"`
	Status   field.Status `json:"status"`
	Answer   string       `json:"answer"`
	Archived bool         `json:"archived"`
}

func (q *Queries) UpdateStatusAndAnswer(ctx context.Context, arg UpdateStatusAndAnswerParams) error {
	_, err := q.db.ExecContext(ctx, updateStatusAndAnswer,
		arg.ID,
		arg.Status,
		arg.Answer,
		arg.Archived,
	)
	return err
}

const updateVoiceRoom = `-- name: UpdateVoiceRoom :exec
UPDATE puzzles SET voice_room = ?2, location = ?3
WHERE id = ?1
`

type UpdateVoiceRoomParams struct {
	ID        int64  `json:"id"`
	VoiceRoom string `json:"voice_room"`
	Location  string `json:"location"`
}

func (q *Queries) UpdateVoiceRoom(ctx context.Context, arg UpdateVoiceRoomParams) error {
	_, err := q.db.ExecContext(ctx, updateVoiceRoom, arg.ID, arg.VoiceRoom, arg.Location)
	return err
}
