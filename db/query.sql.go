// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: query.sql

package db

import (
	"context"
)

const getPuzzle = `-- name: GetPuzzle :one
SELECT id, name, answer, round, status, description, location, puzzle_url, spreadsheet_id, discord_channel, original_url, name_override, archived, voice_room, reminder FROM puzzles
WHERE id = ? LIMIT 1
`

func (q *Queries) GetPuzzle(ctx context.Context, id int64) (Puzzle, error) {
	row := q.db.QueryRowContext(ctx, getPuzzle, id)
	var i Puzzle
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Answer,
		&i.Round,
		&i.Status,
		&i.Description,
		&i.Location,
		&i.PuzzleUrl,
		&i.SpreadsheetID,
		&i.DiscordChannel,
		&i.OriginalUrl,
		&i.NameOverride,
		&i.Archived,
		&i.VoiceRoom,
		&i.Reminder,
	)
	return i, err
}

const listPuzzles = `-- name: ListPuzzles :many
SELECT id, name, answer, round, status, description, location, puzzle_url, spreadsheet_id, discord_channel, original_url, name_override, archived, voice_room, reminder FROM puzzles
ORDER BY id
`

func (q *Queries) ListPuzzles(ctx context.Context) ([]Puzzle, error) {
	rows, err := q.db.QueryContext(ctx, listPuzzles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Puzzle
	for rows.Next() {
		var i Puzzle
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Answer,
			&i.Round,
			&i.Status,
			&i.Description,
			&i.Location,
			&i.PuzzleUrl,
			&i.SpreadsheetID,
			&i.DiscordChannel,
			&i.OriginalUrl,
			&i.NameOverride,
			&i.Archived,
			&i.VoiceRoom,
			&i.Reminder,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
